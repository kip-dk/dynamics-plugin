// Plugin Version: 1.0.6.0, Dynamics 365 svcutil solid extension tool by Kipon ApS (c) 2019,2020,2021, Kjeld Poulsen
// This file is autogenerated. Do not touch the code manually.

using System;
using System.Linq;
using Microsoft.Xrm.Sdk;
namespace Kipon.Xrm
{
	public sealed class Version
	{
		public const string No = "1.0.6.0";
	}
}
namespace Kipon.Solid.Plugin.Entities
{
	public partial class SolidContextService : Kipon.Xrm.ServiceAPI.IEntityCache { }
	[Kipon.Xrm.Attributes.Export(typeof(IUnitOfWork))]
	[Kipon.Xrm.Attributes.Export(typeof(Kipon.Xrm.IUnitOfWork))]
	public sealed partial class CrmUnitOfWork: IUnitOfWork, IDisposable, Kipon.Xrm.IService
	{
		private SolidContextService context;
		private IOrganizationService _service;
		public CrmUnitOfWork(IOrganizationService orgService)
		{
			this._service = orgService;
			this.context = new SolidContextService(_service);
		}

        public void Dispose()
        {
            context.Dispose();
        }

        public R ExecuteRequest<R>(OrganizationRequest request) where R : OrganizationResponse
        {
            return (R)this.context.Execute(request);
        }

        public OrganizationResponse Execute(OrganizationRequest request)
        {
            return this.context.Execute(request);
        }


        public Guid Create(Entity entity)
        {
            return this._service.Create(entity);
        }

        public void Update(Entity entity)
        {
            this._service.Update(entity);
        }

        public void Delete(Entity entity)
        {
            this._service.Delete(entity.LogicalName, entity.Id);
        }

        public void ClearContext()
        {
            var candidates = this.context.GetAttachedEntities().ToArray();
            foreach (var can in candidates) 
            {
                context.Detach(can);
            }
        }

        public void Detach(string logicalName, params Guid[] ids)
        {
            if (this.context != null)
            {
                var candidates = (from c in this.context.GetAttachedEntities() where c.LogicalName == logicalName select c);
                if (ids != null && ids.Length > 0)
                {
                    candidates = (from c in candidates where ids.Contains(c.Id) select c);
                }
                foreach (var r in candidates.ToArray())
                {
                    context.Detach(r);
                }
            }
        }

        public void Detach(Microsoft.Xrm.Sdk.EntityReference eref)
        {
            this.Detach(eref.LogicalName, eref.Id);
        }

        public void Detach(Microsoft.Xrm.Sdk.Entity ent)
        {
            this.Detach(ent.LogicalName, ent.Id);
        }

        public Kipon.Xrm.ServiceAPI.IEntityCache Cache => this.context;

		void Kipon.Xrm.IService.OnStepFinalized()
		{
			foreach (var e in this.context.GetAttachedEntities().ToArray()) this.context.Detach(e);
		}

		private Kipon.Xrm.IRepository<Account> _accounts; 
		public Kipon.Xrm.IRepository<Account> Accounts
		{
			get
			{
				if (_accounts == null)
					{
						_accounts = new CrmRepository<Account>(this.context, this._service);
					}
				return _accounts;
			}
		}
		private Kipon.Xrm.IRepository<PhoneCall> _phonecalls; 
		public Kipon.Xrm.IRepository<PhoneCall> Phonecalls
		{
			get
			{
				if (_phonecalls == null)
					{
						_phonecalls = new CrmRepository<PhoneCall>(this.context, this._service);
					}
				return _phonecalls;
			}
		}
		private Kipon.Xrm.IRepository<Contact> _contacts; 
		public Kipon.Xrm.IRepository<Contact> Contacts
		{
			get
			{
				if (_contacts == null)
					{
						_contacts = new CrmRepository<Contact>(this.context, this._service);
					}
				return _contacts;
			}
		}
		private Kipon.Xrm.IRepository<Lead> _leads; 
		public Kipon.Xrm.IRepository<Lead> Leads
		{
			get
			{
				if (_leads == null)
					{
						_leads = new CrmRepository<Lead>(this.context, this._service);
					}
				return _leads;
			}
		}
		private Kipon.Xrm.IRepository<Opportunity> _opportunities; 
		public Kipon.Xrm.IRepository<Opportunity> Opportunities
		{
			get
			{
				if (_opportunities == null)
					{
						_opportunities = new CrmRepository<Opportunity>(this.context, this._service);
					}
				return _opportunities;
			}
		}
		private Kipon.Xrm.IRepository<SalesOrder> _salesorders; 
		public Kipon.Xrm.IRepository<SalesOrder> Salesorders
		{
			get
			{
				if (_salesorders == null)
					{
						_salesorders = new CrmRepository<SalesOrder>(this.context, this._service);
					}
				return _salesorders;
			}
		}
		private Kipon.Xrm.IRepository<Quote> _quotes; 
		public Kipon.Xrm.IRepository<Quote> Quotes
		{
			get
			{
				if (_quotes == null)
					{
						_quotes = new CrmRepository<Quote>(this.context, this._service);
					}
				return _quotes;
			}
		}
		private Kipon.Xrm.IRepository<SystemUser> _systemusers; 
		public Kipon.Xrm.IRepository<SystemUser> Systemusers
		{
			get
			{
				if (_systemusers == null)
					{
						_systemusers = new CrmRepository<SystemUser>(this.context, this._service);
					}
				return _systemusers;
			}
		}
		private Kipon.Xrm.IRepository<kipon_datepoc> _datepocs; 
		public Kipon.Xrm.IRepository<kipon_datepoc> Datepocs
		{
			get
			{
				if (_datepocs == null)
					{
						_datepocs = new CrmRepository<kipon_datepoc>(this.context, this._service);
					}
				return _datepocs;
			}
		}
	}
	[Kipon.Xrm.Attributes.Export(typeof(IAdminUnitOfWork))]
	[Kipon.Xrm.Attributes.Export(typeof(Kipon.Xrm.IAdminUnitOfWork))]
	public sealed partial class AdminCrmUnitOfWork : IAdminUnitOfWork, IDisposable, Kipon.Xrm.IService
	{
		private SolidContextService context;
		private IOrganizationService _service;
		public AdminCrmUnitOfWork(IOrganizationService orgService)
		{
			this._service = orgService;
			this.context = new SolidContextService(_service);
		}

        public void Dispose()
        {
            context.Dispose();
        }

        public R ExecuteRequest<R>(OrganizationRequest request) where R : OrganizationResponse
        {
            return (R)this.context.Execute(request);
        }

        public OrganizationResponse Execute(OrganizationRequest request)
        {
            return this.context.Execute(request);
        }


        public Guid Create(Entity entity)
        {
            return this._service.Create(entity);
        }

        public void Update(Entity entity)
        {
            this._service.Update(entity);
        }

        public void Delete(Entity entity)
        {
            this._service.Delete(entity.LogicalName, entity.Id);
        }

        public void ClearContext()
        {
            var candidates = this.context.GetAttachedEntities().ToArray();
            foreach (var can in candidates) 
            {
                context.Detach(can);
            }
        }

        public void Detach(string logicalName, params Guid[] ids)
        {
            if (this.context != null)
            {
                var candidates = (from c in this.context.GetAttachedEntities() where c.LogicalName == logicalName select c);
                if (ids != null && ids.Length > 0)
                {
                    candidates = (from c in candidates where ids.Contains(c.Id) select c);
                }
                foreach (var r in candidates.ToArray())
                {
                    context.Detach(r);
                }
            }
        }

        public void Detach(Microsoft.Xrm.Sdk.EntityReference eref)
        {
            this.Detach(eref.LogicalName, eref.Id);
        }

        public void Detach(Microsoft.Xrm.Sdk.Entity ent)
        {
            this.Detach(ent.LogicalName, ent.Id);
        }

        public Kipon.Xrm.ServiceAPI.IEntityCache Cache => this.context;

		void Kipon.Xrm.IService.OnStepFinalized()
		{
			foreach (var e in this.context.GetAttachedEntities().ToArray()) this.context.Detach(e);
		}

		private Kipon.Xrm.IRepository<Account> _accounts; 
		public Kipon.Xrm.IRepository<Account> Accounts
		{
			get
			{
				if (_accounts == null)
					{
						_accounts = new CrmRepository<Account>(this.context, this._service);
					}
				return _accounts;
			}
		}
		private Kipon.Xrm.IRepository<PhoneCall> _phonecalls; 
		public Kipon.Xrm.IRepository<PhoneCall> Phonecalls
		{
			get
			{
				if (_phonecalls == null)
					{
						_phonecalls = new CrmRepository<PhoneCall>(this.context, this._service);
					}
				return _phonecalls;
			}
		}
		private Kipon.Xrm.IRepository<Contact> _contacts; 
		public Kipon.Xrm.IRepository<Contact> Contacts
		{
			get
			{
				if (_contacts == null)
					{
						_contacts = new CrmRepository<Contact>(this.context, this._service);
					}
				return _contacts;
			}
		}
		private Kipon.Xrm.IRepository<Lead> _leads; 
		public Kipon.Xrm.IRepository<Lead> Leads
		{
			get
			{
				if (_leads == null)
					{
						_leads = new CrmRepository<Lead>(this.context, this._service);
					}
				return _leads;
			}
		}
		private Kipon.Xrm.IRepository<Opportunity> _opportunities; 
		public Kipon.Xrm.IRepository<Opportunity> Opportunities
		{
			get
			{
				if (_opportunities == null)
					{
						_opportunities = new CrmRepository<Opportunity>(this.context, this._service);
					}
				return _opportunities;
			}
		}
		private Kipon.Xrm.IRepository<SalesOrder> _salesorders; 
		public Kipon.Xrm.IRepository<SalesOrder> Salesorders
		{
			get
			{
				if (_salesorders == null)
					{
						_salesorders = new CrmRepository<SalesOrder>(this.context, this._service);
					}
				return _salesorders;
			}
		}
		private Kipon.Xrm.IRepository<Quote> _quotes; 
		public Kipon.Xrm.IRepository<Quote> Quotes
		{
			get
			{
				if (_quotes == null)
					{
						_quotes = new CrmRepository<Quote>(this.context, this._service);
					}
				return _quotes;
			}
		}
		private Kipon.Xrm.IRepository<SystemUser> _systemusers; 
		public Kipon.Xrm.IRepository<SystemUser> Systemusers
		{
			get
			{
				if (_systemusers == null)
					{
						_systemusers = new CrmRepository<SystemUser>(this.context, this._service);
					}
				return _systemusers;
			}
		}
		private Kipon.Xrm.IRepository<kipon_datepoc> _datepocs; 
		public Kipon.Xrm.IRepository<kipon_datepoc> Datepocs
		{
			get
			{
				if (_datepocs == null)
					{
						_datepocs = new CrmRepository<kipon_datepoc>(this.context, this._service);
					}
				return _datepocs;
			}
		}
	}
	public partial interface IAccountTarget : Kipon.Xrm.Target<Account>{ }
	public partial interface IAccountPreimage : Kipon.Xrm.Preimage<Account>{ }
	public partial interface IAccountPostimage : Kipon.Xrm.Postimage<Account>{ }
	public partial interface IAccountMergedimage : Kipon.Xrm.Mergedimage<Account>{ }
	public sealed partial class Account :
		IAccountTarget,
		IAccountPreimage,
		IAccountPostimage,
		IAccountMergedimage
	{
	}
	public partial interface IPhoneCallTarget : Kipon.Xrm.Target<PhoneCall>{ }
	public partial interface IPhoneCallPreimage : Kipon.Xrm.Preimage<PhoneCall>{ }
	public partial interface IPhoneCallPostimage : Kipon.Xrm.Postimage<PhoneCall>{ }
	public partial interface IPhoneCallMergedimage : Kipon.Xrm.Mergedimage<PhoneCall>{ }
	public sealed partial class PhoneCall :
		IPhoneCallTarget,
		IPhoneCallPreimage,
		IPhoneCallPostimage,
		IPhoneCallMergedimage
	{
	}
	public partial interface IContactTarget : Kipon.Xrm.Target<Contact>{ }
	public partial interface IContactPreimage : Kipon.Xrm.Preimage<Contact>{ }
	public partial interface IContactPostimage : Kipon.Xrm.Postimage<Contact>{ }
	public partial interface IContactMergedimage : Kipon.Xrm.Mergedimage<Contact>{ }
	public sealed partial class Contact :
		IContactTarget,
		IContactPreimage,
		IContactPostimage,
		IContactMergedimage
	{
	}
	public partial interface ILeadTarget : Kipon.Xrm.Target<Lead>{ }
	public partial interface ILeadPreimage : Kipon.Xrm.Preimage<Lead>{ }
	public partial interface ILeadPostimage : Kipon.Xrm.Postimage<Lead>{ }
	public partial interface ILeadMergedimage : Kipon.Xrm.Mergedimage<Lead>{ }
	public sealed partial class Lead :
		ILeadTarget,
		ILeadPreimage,
		ILeadPostimage,
		ILeadMergedimage
	{
	}
	public partial interface IOpportunityTarget : Kipon.Xrm.Target<Opportunity>{ }
	public partial interface IOpportunityPreimage : Kipon.Xrm.Preimage<Opportunity>{ }
	public partial interface IOpportunityPostimage : Kipon.Xrm.Postimage<Opportunity>{ }
	public partial interface IOpportunityMergedimage : Kipon.Xrm.Mergedimage<Opportunity>{ }
	public sealed partial class Opportunity :
		IOpportunityTarget,
		IOpportunityPreimage,
		IOpportunityPostimage,
		IOpportunityMergedimage
	{
	}
	public partial interface ISalesOrderTarget : Kipon.Xrm.Target<SalesOrder>{ }
	public partial interface ISalesOrderPreimage : Kipon.Xrm.Preimage<SalesOrder>{ }
	public partial interface ISalesOrderPostimage : Kipon.Xrm.Postimage<SalesOrder>{ }
	public partial interface ISalesOrderMergedimage : Kipon.Xrm.Mergedimage<SalesOrder>{ }
	public sealed partial class SalesOrder :
		ISalesOrderTarget,
		ISalesOrderPreimage,
		ISalesOrderPostimage,
		ISalesOrderMergedimage
	{
	}
	public partial interface IQuoteTarget : Kipon.Xrm.Target<Quote>{ }
	public partial interface IQuotePreimage : Kipon.Xrm.Preimage<Quote>{ }
	public partial interface IQuotePostimage : Kipon.Xrm.Postimage<Quote>{ }
	public partial interface IQuoteMergedimage : Kipon.Xrm.Mergedimage<Quote>{ }
	public sealed partial class Quote :
		IQuoteTarget,
		IQuotePreimage,
		IQuotePostimage,
		IQuoteMergedimage
	{
	}
	public partial interface ISystemUserTarget : Kipon.Xrm.Target<SystemUser>{ }
	public partial interface ISystemUserPreimage : Kipon.Xrm.Preimage<SystemUser>{ }
	public partial interface ISystemUserPostimage : Kipon.Xrm.Postimage<SystemUser>{ }
	public partial interface ISystemUserMergedimage : Kipon.Xrm.Mergedimage<SystemUser>{ }
	public sealed partial class SystemUser :
		ISystemUserTarget,
		ISystemUserPreimage,
		ISystemUserPostimage,
		ISystemUserMergedimage
	{
	}
	public partial interface Ikipon_datepocTarget : Kipon.Xrm.Target<kipon_datepoc>{ }
	public partial interface Ikipon_datepocPreimage : Kipon.Xrm.Preimage<kipon_datepoc>{ }
	public partial interface Ikipon_datepocPostimage : Kipon.Xrm.Postimage<kipon_datepoc>{ }
	public partial interface Ikipon_datepocMergedimage : Kipon.Xrm.Mergedimage<kipon_datepoc>{ }
	public sealed partial class kipon_datepoc :
		Ikipon_datepocTarget,
		Ikipon_datepocPreimage,
		Ikipon_datepocPostimage,
		Ikipon_datepocMergedimage
	{
	}
	public sealed class AccountReference : Kipon.Xrm.TargetReference<Account>
	{
		public AccountReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => Account.EntityLogicalName;
	}
	public sealed class PhoneCallReference : Kipon.Xrm.TargetReference<PhoneCall>
	{
		public PhoneCallReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => PhoneCall.EntityLogicalName;
	}
	public sealed class ContactReference : Kipon.Xrm.TargetReference<Contact>
	{
		public ContactReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => Contact.EntityLogicalName;
	}
	public sealed class LeadReference : Kipon.Xrm.TargetReference<Lead>
	{
		public LeadReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => Lead.EntityLogicalName;
	}
	public sealed class OpportunityReference : Kipon.Xrm.TargetReference<Opportunity>
	{
		public OpportunityReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => Opportunity.EntityLogicalName;
	}
	public sealed class SalesOrderReference : Kipon.Xrm.TargetReference<SalesOrder>
	{
		public SalesOrderReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => SalesOrder.EntityLogicalName;
	}
	public sealed class QuoteReference : Kipon.Xrm.TargetReference<Quote>
	{
		public QuoteReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => Quote.EntityLogicalName;
	}
	public sealed class SystemUserReference : Kipon.Xrm.TargetReference<SystemUser>
	{
		public SystemUserReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => SystemUser.EntityLogicalName;
	}
	public sealed class kipon_datepocReference : Kipon.Xrm.TargetReference<kipon_datepoc>
	{
		public kipon_datepocReference(EntityReference target): base(target){ }
		protected sealed override string _logicalName => kipon_datepoc.EntityLogicalName;
	}
	public partial interface IUnitOfWork : Kipon.Xrm.IUnitOfWork
	{
		#region entity repositories
		Kipon.Xrm.IRepository<Account> Accounts { get; }
		Kipon.Xrm.IRepository<PhoneCall> Phonecalls { get; }
		Kipon.Xrm.IRepository<Contact> Contacts { get; }
		Kipon.Xrm.IRepository<Lead> Leads { get; }
		Kipon.Xrm.IRepository<Opportunity> Opportunities { get; }
		Kipon.Xrm.IRepository<SalesOrder> Salesorders { get; }
		Kipon.Xrm.IRepository<Quote> Quotes { get; }
		Kipon.Xrm.IRepository<SystemUser> Systemusers { get; }
		Kipon.Xrm.IRepository<kipon_datepoc> Datepocs { get; }
		#endregion
	}
	public partial interface IAdminUnitOfWork : Kipon.Xrm.IAdminUnitOfWork, IUnitOfWork { }
   public class CrmRepository<T> : Kipon.Xrm.IRepository<T> where T: Microsoft.Xrm.Sdk.Entity, new() 
    {
        private SolidContextService context;
        private Microsoft.Xrm.Sdk.IOrganizationService _service;

        public CrmRepository(SolidContextService context, Microsoft.Xrm.Sdk.IOrganizationService service)
        {
            this.context = context;
            this._service = service;
        }

        public IQueryable<T> GetQuery()
        {
            return context.CreateQuery<T>();
        }

        public IQueryable<T> GetQueryIgnoreCache()
        {
            return new Kipon.Xrm.Implementations.NoCacheQueryable<T>(context.CreateQuery<T>(), context);
        }

        public void Delete(T entity)
        {
            this._service.Delete(entity.LogicalName, entity.Id);
            this.context.Detach(entity);
        }

        public void Add(T entity)
        {
            this._service.Create(entity);
            this.context.Attach(entity);
        }

        public void Attach(T entity)
        {
            this.context.Attach(entity);
        }

        public void Detach(T entity)
        {
            this.context.Detach(entity);
        }

        public void Update(T entity)
        {
            this._service.Update(entity);
            if (!this.context.IsAttached(entity))
            {
                this.context.Attach(entity);
            } else 
            {
                var ch = (from c in this.context.GetAttachedEntities() 
                          where c.LogicalName == entity.LogicalName && 
                                c.Id == entity.Id 
                          select c).Single();

                foreach (var key in entity.Attributes.Keys)
                {
                    // update the cache silent
                    ch.Attributes.Remove(key);
                    ch.Attributes.Add(key, entity[key]);
                }
            }
        }

        public T GetById(Guid id)
        {
            return (from q in this.GetQuery()
                    where q.Id == id
                    select q).Single();
        }
    }
	public enum BudgetEnum
	{
		NoCommittedBudget = 0,
		MAyBuy = 1,
		CanBuy = 2,
		WillBuy = 3
	}
	public partial class Account
	{
		public enum PreferredContactMethodCodeEnum
		{
			Any = 1,
			Email = 2,
			Phone = 3,
			Fax = 4,
			Mail = 5,
		}
		[Microsoft.Xrm.Sdk.AttributeLogicalName("preferredcontactmethodcode")]
		public PreferredContactMethodCodeEnum? PreferredContactMethodCode
		{
			get
			{
				Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("preferredcontactmethodcode");
				if (optionSet != null)
				{
					return (PreferredContactMethodCodeEnum)optionSet.Value;
				}
				return null;
			}
			set
			{
				this.OnPropertyChanging("PreferredContactMethodCode");
				if (value != null)
				{
					this.SetAttributeValue("preferredcontactmethodcode", new Microsoft.Xrm.Sdk.OptionSetValue((int)value.Value));
					this.OnPropertyChanged("PreferredContactMethodCode");
					return;
				}
				this.SetAttributeValue("preferredcontactmethodcode", null);
				this.OnPropertyChanged("PreferredContactMethodCode");
			}
		}
		[Microsoft.Xrm.Sdk.AttributeLogicalName("new_multiselectbudget")]
		public BudgetEnum[] MultiSelectBudget
		{
			get
			{
				Microsoft.Xrm.Sdk.OptionSetValueCollection optionSetValues = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValueCollection>("new_multiselectbudget");
				if (optionSetValues != null && optionSetValues.Count > 0)
				{
					return (from v in optionSetValues select (BudgetEnum)v.Value).ToArray();
				}
				return null;
			}
			set
			{
				this.OnPropertyChanging("new_multiselectbudget");
				if (value != null && value.Length > 0)
				{
					var result = new Microsoft.Xrm.Sdk.OptionSetValueCollection();
					foreach (var v in value) result.Add(new Microsoft.Xrm.Sdk.OptionSetValue((int)v));
					this.SetAttributeValue("new_multiselectbudget", result);
					this.OnPropertyChanged("new_multiselectbudget");
					return;
				}
				this.SetAttributeValue("new_multiselectbudget", null);
				this.OnPropertyChanged("new_multiselectbudget");
			}
		}
	}
	public partial class Opportunity
	{
		[Microsoft.Xrm.Sdk.AttributeLogicalName("budgetstatus")]
		public BudgetEnum? Budgetstatus
		{
			get
			{
				Microsoft.Xrm.Sdk.OptionSetValue optionSet = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>("budgetstatus");
				if (optionSet != null)
				{
					return (BudgetEnum)optionSet.Value;
				}
				return null;
			}
			set
			{
				this.OnPropertyChanging("Budgetstatus");
				if (value != null)
				{
					this.SetAttributeValue("budgetstatus", new Microsoft.Xrm.Sdk.OptionSetValue((int)value.Value));
					this.OnPropertyChanged("Budgetstatus");
					return;
				}
				this.SetAttributeValue("budgetstatus", null);
				this.OnPropertyChanged("Budgetstatus");
			}
		}
	}
}
namespace Kipon.Xrm.Extensions.Sdk
{
	public static partial class KiponSdkGeneratedExtensionMethods
	{
		static KiponSdkGeneratedExtensionMethods()
		{
			entittypes[Kipon.Solid.Plugin.Entities.Account.EntityLogicalName] = typeof(Kipon.Solid.Plugin.Entities.Account);
			entittypes[Kipon.Solid.Plugin.Entities.PhoneCall.EntityLogicalName] = typeof(Kipon.Solid.Plugin.Entities.PhoneCall);
			entittypes[Kipon.Solid.Plugin.Entities.Contact.EntityLogicalName] = typeof(Kipon.Solid.Plugin.Entities.Contact);
			entittypes[Kipon.Solid.Plugin.Entities.Lead.EntityLogicalName] = typeof(Kipon.Solid.Plugin.Entities.Lead);
			entittypes[Kipon.Solid.Plugin.Entities.Opportunity.EntityLogicalName] = typeof(Kipon.Solid.Plugin.Entities.Opportunity);
			entittypes[Kipon.Solid.Plugin.Entities.SalesOrder.EntityLogicalName] = typeof(Kipon.Solid.Plugin.Entities.SalesOrder);
			entittypes[Kipon.Solid.Plugin.Entities.Quote.EntityLogicalName] = typeof(Kipon.Solid.Plugin.Entities.Quote);
			entittypes[Kipon.Solid.Plugin.Entities.SystemUser.EntityLogicalName] = typeof(Kipon.Solid.Plugin.Entities.SystemUser);
			entittypes[Kipon.Solid.Plugin.Entities.kipon_datepoc.EntityLogicalName] = typeof(Kipon.Solid.Plugin.Entities.kipon_datepoc);
		}
	}
	public partial class NamingService
	{
		static NamingService()
		{
			Add("entitydataprovider","entitydataproviderid","name");
			Add("opportunitycompetitors","opportunitycompetitorid","name");
			Add("topicmodel","topicmodelid","name");
			Add("bookableresourcecharacteristic","bookableresourcecharacteristicid","name");
			Add("mailbox","mailboxid","name");
			Add("customerrelationship","customerrelationshipid","customerroleidname");
			Add("salesliterature","salesliteratureid","name");
			Add("convertrule","convertruleid","name");
			Add("entityanalyticsconfig","entityanalyticsconfigid","parententitylogicalname");
			Add("msdyn_postruleconfig","msdyn_postruleconfigid","msdyn_name");
			Add("topicmodelconfiguration","topicmodelconfigurationid","name");
			Add("documenttemplate","documenttemplateid","name");
			Add("msdyn_aibfile","msdyn_aibfileid","msdyn_name");
			Add("territory","territoryid","name");
			Add("msdyn_knowledgeinteractioninsight","msdyn_knowledgeinteractioninsightid","msdyn_interactiontype");
			Add("account","accountid","name");
			Add("bulkoperation","activityid","subject");
			Add("fileattachment","fileattachmentid","filename");
			Add("virtualresourcegroupresource","virtualresourcegroupresourceid","name");
			Add("activitypointer","activityid","subject");
			Add("team","teamid","name");
			Add("offlinecommanddefinition","commanddefinitionid","commandname");
			Add("campaignactivity","activityid","subject");
			Add("entity","entityid","name");
			Add("quotedetail","quotedetailid","quotedetailname");
			Add("attribute","attributeid","name");
			Add("customapi","customapiid","name");
			Add("flowsession","flowsessionid","name");
			Add("fieldsecurityprofile","fieldsecurityprofileid","name");
			Add("role","roleid","name");
			Add("connection","connectionid","name");
			Add("msdyn_flowcardtype","msdyn_flowcardtypeid","msdyn_name");
			Add("msdyn_upgradestep","msdyn_upgradestepid","msdyn_name");
			Add("kipon_myactivity","activityid","subject");
			Add("expanderevent","expandereventid","name");
			Add("cascadegrantrevokeaccessversiontracker","cascadegrantrevokeaccessversiontrackerid","name");
			Add("salesorderdetail","salesorderdetailid","salesorderdetailname");
			Add("entitlementtemplate","entitlementtemplateid","name");
			Add("availabletimes","availabletimesid","name");
			Add("mobileofflineprofileitem","mobileofflineprofileitemid","name");
			Add("savedqueryvisualization","savedqueryvisualizationid","name");
			Add("msdyn_siconfig","msdyn_siconfigid","msdyn_version");
			Add("msdyn_aibfileattacheddata","msdyn_aibfileattacheddataid","msdyn_key");
			Add("ko_line","ko_lineid","ko_name");
			Add("publisheraddress","publisheraddressid","name");
			Add("datalakeworkspace","datalakeworkspaceid","name");
			Add("msdyn_aiodtrainingimage","msdyn_aiodtrainingimageid","msdyn_name");
			Add("campaignresponse","activityid","subject");
			Add("kipon_setting","kipon_settingid","kipon_environment");
			Add("kbarticle","kbarticleid","title");
			Add("entityrelationship","entityrelationshipid","schemaname");
			Add("importdata","importdataid","data");
			Add("activitymonitor","activitymonitorid","name");
			Add("msdyn_postconfig","msdyn_postconfigid","msdyn_entitydisplayname");
			Add("availabletimesdatasource","availabletimesdatasourceid","name");
			Add("msdyn_aibdataset","msdyn_aibdatasetid","msdyn_name");
			Add("service","serviceid","name");
			Add("mobileofflineprofileitemassociation","mobileofflineprofileitemassociationid","name");
			Add("ratingvalue","ratingvalueid","name");
			Add("plugintype","plugintypeid","name");
			Add("leadaddress","leadaddressid","name");
			Add("ko_header","ko_headerid","ko_name");
			Add("msdyn_aitemplate","msdyn_aitemplateid","msdyn_uniquename");
			Add("entitlementcontacts","entitlementcontactid","name");
			Add("routingruleitem","routingruleitemid","name");
			Add("opportunitysalesprocess","businessprocessflowinstanceid","name");
			Add("msdyn_databaseversion","msdyn_databaseversionid","msdyn_solutionname");
			Add("invoice","invoiceid","name");
			Add("catalog","catalogid","name");
			Add("activitymimeattachment","activitymimeattachmentid","filename");
			Add("msdyn_knowledgearticleimage","msdyn_knowledgearticleimageid","msdyn_filename");
			Add("topichistory","topichistoryid","name");
			Add("listmember","listmemberid","name");
			Add("childincidentcount","childincidentcountid","name");
			Add("msdyn_knowledgesearchinsight","msdyn_knowledgesearchinsightid","msdyn_searchterm");
			Add("suggestioncardtemplate","suggestioncardtemplateid","name");
			Add("solutioncomponentdefinition","solutioncomponentdefinitionid","name");
			Add("msdyn_postalbum","msdyn_postalbumid","msdyn_name");
			Add("provisionlanguageforuser","provisionlanguageforuserid","name");
			Add("msdyn_aibdatasetrecord","msdyn_aibdatasetrecordid","msdyn_name");
			Add("stagesolutionupload","stagesolutionuploadid","name");
			Add("bookableresourcecategory","bookableresourcecategoryid","name");
			Add("callbackregistration","callbackregistrationid","name");
			Add("accountleads","accountleadid","name");
			Add("kbarticletemplate","kbarticletemplateid","title");
			Add("dynamicpropertyinstance","dynamicpropertyinstanceid","name");
			Add("actioncard","actioncardid","title");
			Add("msdynce_botcontent","msdynce_botcontentid","msdynce_autonumber");
			Add("sdkmessageprocessingstepimage","sdkmessageprocessingstepimageid","name");
			Add("msdyn_federatedarticle","msdyn_federatedarticleid","msdyn_title");
			Add("advancedsimilarityrule","advancedsimilarityruleid","name");
			Add("site","siteid","name");
			Add("bookableresourcecategoryassn","bookableresourcecategoryassnid","name");
			Add("canvasappextendedmetadata","canvasappextendedmetadataid","name");
			Add("businessunit","businessunitid","name");
			Add("managedproperty","managedpropertyid","logicalname");
			Add("newprocess","businessprocessflowinstanceid","name");
			Add("syncerror","syncerrorid","name");
			Add("competitorproduct","competitorproductid","name");
			Add("msdyn_richtextfile","msdyn_richtextfileid","msdyn_name");
			Add("solutioncomponentattributeconfiguration","solutioncomponentattributeconfigurationid","name");
			Add("email","activityid","subject");
			Add("internalcatalogassignment","internalcatalogassignmentid","name");
			Add("recurringappointmentmaster","activityid","subject");
			Add("msdyn_sikeyvalueconfig","msdyn_sikeyvalueconfigid","msdyn_configkey");
			Add("userqueryvisualization","userqueryvisualizationid","name");
			Add("transformationparametermapping","transformationparametermappingid","data");
			Add("msdyn_helppage","msdyn_helppageid","msdyn_displayname");
			Add("orderclose","activityid","subject");
			Add("partnerapplication","partnerapplicationid","name");
			Add("msdyn_upgraderun","msdyn_upgraderunid","msdyn_summary");
			Add("entitlement","entitlementid","name");
			Add("importmap","importmapid","name");
			Add("incident","incidentid","title");
			Add("msdyn_teamscollaboration","msdyn_teamscollaborationid","msdyn_teamname");
			Add("customcontrol","customcontrolid","name");
			Add("dynamicproperty","dynamicpropertyid","name");
			Add("officegraphdocument","officegraphdocumentid","title");
			Add("officedocument","officedocumentid","name");
			Add("sla","slaid","name");
			Add("emailserverprofile","emailserverprofileid","name");
			Add("goalrollupquery","goalrollupqueryid","name");
			Add("calendarrule","calendarruleid","name");
			Add("convertruleitem","convertruleitemid","name");
			Add("salesliteratureitem","salesliteratureitemid","title");
			Add("settingdefinition","settingdefinitionid","displayname");
			Add("bookingstatus","bookingstatusid","name");
			Add("msdyn_entityrankingrule","msdyn_entityrankingruleid","msdyn_name");
			Add("postfollow","postfollowid","regardingobjectidname");
			Add("dynamicpropertyassociation","dynamicpropertyassociationid","name");
			Add("similarityrule","similarityruleid","name");
			Add("competitoraddress","competitoraddressid","name");
			Add("azureserviceconnection","azureserviceconnectionid","name");
			Add("transactioncurrency","transactioncurrencyid","currencyname");
			Add("campaignactivityitem","campaignactivityitemid","name");
			Add("knowledgearticleincident","knowledgearticleincidentid","knowledgearticleidname");
			Add("campaignitem","campaignitemid","name");
			Add("topic","topicid","name");
			Add("listoperation","listoperationid","listoperationprimaryname");
			Add("solution","solutionid","friendlyname");
			Add("exportsolutionupload","exportsolutionuploadid","name");
			Add("competitorsalesliterature","competitorsalesliteratureid","name");
			Add("postcomment","postcommentid","text");
			Add("msdyn_suggestedcontactsdatasource","msdyn_suggestedcontactsdatasourceid","msdyn_name");
			Add("report","reportid","name");
			Add("msdyn_callablecontext","msdyn_callablecontextid","msdyn_EntityLogicalName");
			Add("customeraddress","customeraddressid","name");
			Add("msdyn_odatav4ds","msdyn_odatav4dsid","msdyn_name");
			Add("customeropportunityrole","customeropportunityroleid","opportunityroleidname");
			Add("resource","resourceid","name");
			Add("pdfsetting","pdfsettingid","entityname");
			Add("leadproduct","leadproductid","name");
			Add("contractdetail","contractdetailid","title");
			Add("list","listid","listname");
			Add("msdyn_wallsavedqueryusersettings","msdyn_wallsavedqueryusersettingsid","msdyn_entityname");
			Add("environmentvariablevalue","environmentvariablevalueid","schemaname");
			Add("productassociation","productassociationid","productidname");
			Add("savedquery","savedqueryid","name");
			Add("uom","uomid","name");
			Add("msdyn_suggestedactivitydatasource","msdyn_suggestedactivitydatasourceid","msdyn_name");
			Add("conversationtranscript","conversationtranscriptid","name");
			Add("channelaccessprofilerule","channelaccessprofileruleid","name");
			Add("untrackedemail","activityid","subject");
			Add("processsession","processsessionid","name");
			Add("msdyn_notesanalysisconfig","msdyn_notesanalysisconfigid","msdyn_name");
			Add("goal","goalid","title");
			Add("constraintbasedgroup","constraintbasedgroupid","name");
			Add("incidentresolution","activityid","subject");
			Add("ratingmodel","ratingmodelid","name");
			Add("connector","connectorid","name");
			Add("asyncoperation","asyncoperationid","name");
			Add("knowledgesearchmodel","knowledgesearchmodelid","name");
			Add("equipment","equipmentid","name");
			Add("webresource","webresourceid","name");
			Add("msdyn_aiodtrainingboundingbox","msdyn_aiodtrainingboundingboxid","msdyn_name");
			Add("activityparty","activitypartyid","partyidname");
			Add("wizardaccessprivilege","wizardaccessprivilegeid","entityname");
			Add("msdyn_aiodlabel","msdyn_aiodlabelid","msdyn_name");
			Add("sharepointdocument","sharepointdocumentid","fullname");
			Add("msdyn_kmfederatedsearchconfig","msdyn_kmfederatedsearchconfigid","msdyn_name");
			Add("msdyn_aimodel","msdyn_aimodelid","msdyn_name");
			Add("metric","metricid","name");
			Add("customcontrolresource","customcontrolresourceid","name");
			Add("fax","activityid","subject");
			Add("kipon_vetest","kipon_vetestid","kipon_name");
			Add("msdyn_msteamssetting","msdyn_msteamssettingid","msdyn_msteamssettingsname");
			Add("optionset","optionsetid","name");
			Add("bot","botid","name");
			Add("serviceendpoint","serviceendpointid","name");
			Add("position","positionid","name");
			Add("channelaccessprofile","channelaccessprofileid","name");
			Add("knowledgearticleviews","knowledgearticleviewsid","knowledgearticleidname");
			Add("opportunityclose","activityid","subject");
			Add("msdyn_actioncardrolesetting","msdyn_actioncardrolesettingid","msdyn_name");
			Add("msdyn_aiodimage","msdyn_aiodimageid","msdyn_name");
			Add("msdyn_federatedarticleincident","msdyn_federatedarticleincidentid","msdyn_name");
			Add("systemform","formid","name");
			Add("msdyn_aiconfiguration","msdyn_aiconfigurationid","msdyn_name");
			Add("msdyn_aibdatasetscontainer","msdyn_aibdatasetscontainerid","msdyn_name");
			Add("attachment","attachmentid","filename");
			Add("bookableresourcegroup","bookableresourcegroupid","name");
			Add("template","templateid","title");
			Add("serviceappointment","activityid","subject");
			Add("salesprocessinstance","salesprocessinstanceid","name");
			Add("theme","themeid","name");
			Add("organization","organizationid","name");
			Add("bookableresource","bookableresourceid","name");
			Add("solutioncomponentconfiguration","solutioncomponentconfigurationid","name");
			Add("msdyn_playbookinstance","msdyn_playbookinstanceid","msdyn_name");
			Add("msdyn_solutionhistory","msdyn_solutionhistoryid","msdyn_name");
			Add("letter","activityid","subject");
			Add("pluginassembly","pluginassemblyid","name");
			Add("businessunitnewsarticle","businessunitnewsarticleid","articletitle");
			Add("knowledgearticle","knowledgearticleid","title");
			Add("appmodule","appmoduleid","name");
			Add("resourcegroupdatasource","resourcegroupdatasourceid","name");
			Add("contactinvoices","contactinvoiceid","name");
			Add("leadtoopportunitysalesprocess","businessprocessflowinstanceid","name");
			Add("characteristic","characteristicid","name");
			Add("calendar","calendarid","name");
			Add("msdyn_untrackedappointment","msdyn_untrackedappointmentid","msdyn_name");
			Add("sdkmessage","sdkmessageid","name");
			Add("bulkoperationlog","bulkoperationlogid","name");
			Add("lead","leadid","fullname");
			Add("connectionreference","connectionreferenceid","connectionreferencedisplayname");
			Add("contact","contactid","fullname");
			Add("msdyn_suggestedactivity","msdyn_suggestedactivityid","msdyn_subject");
			Add("campaign","campaignid","name");
			Add("queue","queueid","name");
			Add("expiredprocess","businessprocessflowinstanceid","name");
			Add("teamtemplate","teamtemplateid","teamtemplatename");
			Add("entitlemententityallocationtypemapping","entitlemententityallocationtypemappingid","name");
			Add("contactleads","contactleadid","name");
			Add("appmodulecomponentedge","appmodulecomponentedgeid","name");
			Add("appmodulecomponentnode","appmodulecomponentnodeid","name");
			Add("sdkmessagefilter","sdkmessagefilterid","name");
			Add("userform","userformid","name");
			Add("msdyn_knowledgearticletemplate","msdyn_knowledgearticletemplateid","msdyn_name");
			Add("interactionforemail","interactionforemailid","name");
			Add("product","productid","name");
			Add("resourcegroup","resourcegroupid","name");
			Add("attributeimageconfig","attributeimageconfigid","attributelogicalname");
			Add("solutioncomponentrelationshipconfiguration","solutioncomponentrelationshipconfigurationid","name");
			Add("translationprocess","businessprocessflowinstanceid","name");
			Add("adminsettingsentity","adminsettingsentityid","new_name");
			Add("datalakeworkspacepermission","datalakeworkspacepermissionid","name");
			Add("dynamicpropertyoptionsetitem","dynamicpropertyoptionsetvalueid","dynamicpropertyoptionname");
			Add("msdyn_icebreakersconfig","msdyn_icebreakersconfigid","msdyn_name");
			Add("cardtype","cardtypeid","cardname");
			Add("botcomponent","botcomponentid","name");
			Add("task","activityid","subject");
			Add("msdyn_playbooktemplate","msdyn_playbooktemplateid","msdyn_name");
			Add("importfile","importfileid","name");
			Add("workflow","workflowid","name");
			Add("kipon_vtprovider","kipon_vtproviderid","kipon_name");
			Add("workflowbinary","workflowbinaryid","name");
			Add("appconfigmaster","appconfigmasterid","name");
			Add("msdyn_autocapturerule","msdyn_autocaptureruleid","msdyn_name");
			Add("msdyn_solutionhistorydatasource","msdyn_solutionhistorydatasourceid","msdyn_name");
			Add("topicmodelexecutionhistory","topicmodelexecutionhistoryid","name");
			Add("entitydatasource","entitydatasourceid","name");
			Add("catalogassignment","catalogassignmentid","name");
			Add("msdyn_playbookactivityattribute","msdyn_playbookactivityattributeid","msdyn_attributeLogicalName");
			Add("owner","ownerid","name");
			Add("kbarticlecomment","kbarticlecommentid","title");
			Add("canvasapp","canvasappid","name");
			Add("resourcegroupexpansion","resourcegroupexpansionid","name");
			Add("datalakefolderpermission","datalakefolderpermissionid","name");
			Add("channelaccessprofileruleitem","channelaccessprofileruleitemid","name");
			Add("columnmapping","columnmappingid","sourceattributename");
			Add("incidentknowledgebaserecord","incidentknowledgebaserecordid","name");
			Add("navigationsetting","navigationsettingid","name");
			Add("entitlementproducts","entitlementproductid","name");
			Add("userquery","userqueryid","name");
			Add("pricelevel","pricelevelid","name");
			Add("package","packageid","packageuniquename");
			Add("msdyn_componentlayerdatasource","msdyn_componentlayerdatasourceid","msdyn_name");
			Add("customapirequestparameter","customapirequestparameterid","name");
			Add("routingrule","routingruleid","name");
			Add("import","importid","name");
			Add("kipon_datepoc","kipon_datepocid","kipon_name");
			Add("externalpartyitem","externalpartyitemid","name");
			Add("environmentvariabledefinition","environmentvariabledefinitionid","schemaname");
			Add("uomschedule","uomscheduleid","name");
			Add("hierarchyrule","hierarchyruleid","name");
			Add("slakpiinstance","slakpiinstanceid","name");
			Add("category","categoryid","title");
			Add("appointment","activityid","subject");
			Add("msdyn_aibdatasetfile","msdyn_aibdatasetfileid","msdyn_name");
			Add("multientitysearch","multientitysearchid","name");
			Add("holidaywrapper","holidaywrapperid","name");
			Add("emailsignature","emailsignatureid","title");
			Add("connectionrole","connectionroleid","name");
			Add("quote","quoteid","name");
			Add("msdyn_collabgraphresource","msdyn_collabgraphresourceid","msdyn_graphresourcename");
			Add("annotation","annotationid","subject");
			Add("externalparty","externalpartyid","fullname");
			Add("channelproperty","channelpropertyid","name");
			Add("entitlementchannel","entitlementchannelid","name");
			Add("delveactionhub","delveactionhubid","subject");
			Add("post","postid","text");
			Add("queueitem","queueitemid","title");
			Add("systemuser","systemuserid","fullname");
			Add("competitor","competitorid","name");
			Add("bookableresourcebookingheader","bookableresourcebookingheaderid","name");
			Add("opportunity","opportunityid","name");
			Add("socialactivity","activityid","subject");
			Add("entitykey","entitykeyid","logicalname");
			Add("msdyn_wallsavedquery","msdyn_wallsavedqueryid","msdyn_entityname");
			Add("relationshipattribute","relationshipattributeid","name");
			Add("syncattributemappingprofile","syncattributemappingprofileid","name");
			Add("knowledgebaserecord","knowledgebaserecordid","title");
			Add("msdyn_actioncardregarding","msdyn_actioncardregardingid","msdyn_name");
			Add("timezonelocalizedname","timezonelocalizednameid","userinterfacename");
			Add("processstageparameter","processstageparameterid","name");
			Add("entitlementtemplatechannel","entitlementtemplatechannelid","name");
			Add("sharepointdocumentlocation","sharepointdocumentlocationid","name");
			Add("timezonerule","timezoneruleid","timezoneruleversionnumber");
			Add("productsubstitute","productsubstituteid","name");
			Add("msdyn_playbookcategory","msdyn_playbookcategoryid","msdyn_name");
			Add("bookableresourcebooking","bookableresourcebookingid","name");
			Add("contracttemplate","contracttemplateid","name");
			Add("cascadegrantrevokeaccessrecordstracker","cascadegrantrevokeaccessrecordstrackerid","name");
			Add("relationship","relationshipid","name");
			Add("plugintracelog","plugintracelogid","typename");
			Add("msdyn_componentlayer","msdyn_componentlayerid","msdyn_name");
			Add("personaldocumenttemplate","personaldocumenttemplateid","name");
			Add("sharepointsite","sharepointsiteid","name");
			Add("slaitem","slaitemid","name");
			Add("relationshiprole","relationshiproleid","name");
			Add("msdyn_upgradeversion","msdyn_upgradeversionid","msdyn_summary");
			Add("sdkmessageprocessingstep","sdkmessageprocessingstepid","name");
			Add("salesorder","salesorderid","name");
			Add("bulkdeleteoperation","bulkdeleteoperationid","name");
			Add("publisher","publisherid","friendlyname");
			Add("customapiresponseproperty","customapiresponsepropertyid","name");
			Add("discounttype","discounttypeid","name");
			Add("opportunityproduct","opportunityproductid","opportunityproductname");
			Add("commitment","commitmentid","name");
			Add("contactquotes","contactquoteid","name");
			Add("productpricelevel","productpricelevelid","productidname");
			Add("msdyn_msteamssettingsv2","msdyn_msteamssettingsv2id","msdyn_msteamssettingsname");
			Add("discount","discountid","name");
			Add("entitlementtemplateproducts","entitlementtemplateproductid","name");
			Add("documentindex","documentindexid","title");
			Add("webwizard","webwizardid","name");
			Add("msdyn_playbookactivity","msdyn_playbookactivityid","msdyn_subject");
			Add("mailmergetemplate","mailmergetemplateid","name");
			Add("mobileofflineprofile","mobileofflineprofileid","name");
			Add("msdyn_salesinsightssettings","msdyn_salesinsightssettingsid","msdyn_name");
			Add("feedback","feedbackid","title");
			Add("msdyn_solutioncomponentsummary","msdyn_solutioncomponentsummaryid","msdyn_name");
			Add("msdyn_relationshipinsightsunifiedconfig","msdyn_relationshipinsightsunifiedconfigid","new_name");
			Add("datalakefolder","datalakefolderid","name");
			Add("socialprofile","socialprofileid","profilename");
			Add("resourcespec","resourcespecid","name");
			Add("appsetting","appsettingid","displayname");
			Add("tracelog","tracelogid","text");
			Add("roletemplate","roletemplateid","name");
			Add("msdyn_suggestedcontact","msdyn_suggestedcontactid","msdyn_fullname");
			Add("timezonedefinition","timezonedefinitionid","userinterfacename");
			Add("invoicedetail","invoicedetailid","invoicedetailname");
			Add("subject","subjectid","title");
			Add("authorizationserver","authorizationserverid","name");
			Add("duplicaterule","duplicateruleid","name");
			Add("bookableresourcebookingexchangesyncidmapping","bookableresourcebookingexchangesyncidmappingid","name");
			Add("privilege","privilegeid","name");
			Add("complexcontrol","complexcontrolid","name");
			Add("processstage","processstageid","stagename");
			Add("serviceplan","serviceplanid","name");
			Add("contactorders","contactorderid","name");
			Add("msdyn_autocapturesettings","msdyn_autocapturesettingsid","msdyn_name");
			Add("entityimageconfig","entityimageconfigid","parententitylogicalname");
			Add("appelement","appelementid","name");
			Add("quoteclose","activityid","subject");
			Add("leadcompetitors","leadcompetitorid","name");
			Add("recommendeddocument","recommendeddocumentid","title");
			Add("msdyn_solutioncomponentdatasource","msdyn_solutioncomponentdatasourceid","msdyn_name");
			Add("msdyn_aifptrainingdocument","msdyn_aifptrainingdocumentid","msdyn_name");
			Add("phonetocaseprocess","businessprocessflowinstanceid","name");
			Add("phonecall","activityid","subject");
			Add("contract","contractid","title");
			Add("channelpropertygroup","channelpropertygroupid","name");
			Add("productsalesliterature","productsalesliteratureid","name");
			Add("servicecontractcontacts","servicecontractcontactid","name");
			Add("languagelocale","languagelocaleid","name");
		}
	}
}
namespace Kipon.Solid.Plugin.Actions
{
	[Kipon.Xrm.Attributes.LogicalName("account")]
	public partial interface IAccountCountContactsRequest: Kipon.Xrm.ActionTarget<Kipon.Solid.Plugin.Entities.Account>
	{
		string Name { get; }
	}
	public partial class AccountCountContactsResponse
	{
		[Kipon.Xrm.Attributes.Output("AMoney", true)]
		 public Microsoft.Xrm.Sdk.Money AMoney { get; set; }
		[Kipon.Xrm.Attributes.Output("Count", true)]
		 public int Count { get; set; }
	}
	public partial interface IAnunboundedactionRequest
	{
		string Name { get; }
		string Document { get; }
		Microsoft.Xrm.Sdk.OptionSetValue Picklist { get; }
	}
	public partial class AnunboundedactionResponse
	{
		[Kipon.Xrm.Attributes.Output("Id", true)]
		 public string Id { get; set; }
	}
	[Kipon.Xrm.Attributes.LogicalName("lead")]
	public partial interface IQualityLeadRequest: Kipon.Xrm.ActionTarget<Kipon.Solid.Plugin.Entities.Lead>
	{
		Microsoft.Xrm.Sdk.EntityReference OpportunityCurrencyId { get; }
		bool CreateContact { get; }
		Microsoft.Xrm.Sdk.OptionSetValue Status { get; }
		bool? SuppressDuplicateDetection { get; }
		Microsoft.Xrm.Sdk.EntityReference ProcessInstanceId { get; }
		bool CreateOpportunity { get; }
		bool CreateAccount { get; }
		Microsoft.Xrm.Sdk.EntityReference SourceCampaignId { get; }
		Microsoft.Xrm.Sdk.EntityReference OpportunityCustomerId { get; }
	}
	public partial class QualityLeadResponse
	{
		[Kipon.Xrm.Attributes.Output("CreatedEntities", true)]
		 public Microsoft.Xrm.Sdk.EntityReferenceCollection CreatedEntities { get; set; }
	}
}
namespace Kipon.Solid.Plugin.Actions.Implement
{
	using Kipon.Solid.Plugin.Actions;
	using Kipon.Xrm.Actions;
	public partial class AccountCountContactsRequest : AbstractActionRequest, IAccountCountContactsRequest
	{
		public AccountCountContactsRequest(Microsoft.Xrm.Sdk.IPluginExecutionContext ctx): base(ctx){ }
		public string Name {get => this.ValueOf<string>("Name");}
		public Microsoft.Xrm.Sdk.EntityReference Target {get => this.ValueOf<Microsoft.Xrm.Sdk.EntityReference>("Target");}
	}
	public partial class AnunboundedactionRequest : AbstractActionRequest, IAnunboundedactionRequest
	{
		public AnunboundedactionRequest(Microsoft.Xrm.Sdk.IPluginExecutionContext ctx): base(ctx){ }
		public string Name {get => this.ValueOf<string>("Name");}
		public string Document {get => this.ValueOf<string>("Document");}
		public Microsoft.Xrm.Sdk.OptionSetValue Picklist {get => this.ValueOf<Microsoft.Xrm.Sdk.OptionSetValue>("Picklist");}
	}
	public partial class QualityLeadRequest : AbstractActionRequest, IQualityLeadRequest
	{
		public QualityLeadRequest(Microsoft.Xrm.Sdk.IPluginExecutionContext ctx): base(ctx){ }
		public Microsoft.Xrm.Sdk.EntityReference OpportunityCurrencyId {get => this.ValueOf<Microsoft.Xrm.Sdk.EntityReference>("OpportunityCurrencyId");}
		public bool CreateContact {get => this.ValueOf<bool>("CreateContact");}
		public Microsoft.Xrm.Sdk.EntityReference Target {get => this.ValueOf<Microsoft.Xrm.Sdk.EntityReference>("Target");}
		public Microsoft.Xrm.Sdk.OptionSetValue Status {get => this.ValueOf<Microsoft.Xrm.Sdk.OptionSetValue>("Status");}
		public bool? SuppressDuplicateDetection {get => this.ValueOf<bool?>("SuppressDuplicateDetection");}
		public Microsoft.Xrm.Sdk.EntityReference ProcessInstanceId {get => this.ValueOf<Microsoft.Xrm.Sdk.EntityReference>("ProcessInstanceId");}
		public bool CreateOpportunity {get => this.ValueOf<bool>("CreateOpportunity");}
		public bool CreateAccount {get => this.ValueOf<bool>("CreateAccount");}
		public Microsoft.Xrm.Sdk.EntityReference SourceCampaignId {get => this.ValueOf<Microsoft.Xrm.Sdk.EntityReference>("SourceCampaignId");}
		public Microsoft.Xrm.Sdk.EntityReference OpportunityCustomerId {get => this.ValueOf<Microsoft.Xrm.Sdk.EntityReference>("OpportunityCustomerId");}
	}
}
